const ms = require("ms");
class Pagination {
  constructor(client) {
    if (!client) throw new ReferenceError("Cannot Find Client.");
    else {
      this.client = client;
    }
  }
  setTimeout(time) {
    if (!time) throw new ReferenceError("Cannot Find Time.");
    else {
      this.time = ms(time);
    }
    return this;
  }
  setMessage(msg) {
    if (!msg) throw new ReferenceError("Cannot Find Message.");
    else {
      this.msg = msg;
    }
    return this;
  }
  setPages(pages) {
    if (!Array.isArray(pages))
      throw new ReferenceError("Pages Must Be An Array.");
    if (!pages) throw new ReferenceError("Cannot Find Pages.");
    else {
      this.pages = pages;
    }
    return this;
  }
  async start() {
    let msg = this.msg;
    let client = this.client;
    let pages = this.pages;
    let page = 0;
    let currentpage = await msg.channel.send(pages[page]);
    let emojis = ["⏪", "⏩"];
    for (let emoji of emojis) await currentpage.react(emoji);
    var forwardcollector = currentpage.createReactionCollector(
      (reaction, user) =>
        reaction.emoji.name === "⏩" && !user.bot && user.id === msg.author.id,
      { time: this.time }
    );
    var backwardcollector = currentpage.createReactionCollector(
      (reaction, user) =>
        reaction.emoji.name === "⏪" && !user.bot && user.id === msg.author.id,
      { time: this.time }
    );
    forwardcollector.on("collect", (r) => {
      r.users.remove(msg.author);
      page = page + 1 < pages.length ? ++page : 0;
      currentpage.edit(pages[page]);
    });
    backwardcollector.on("collect", (r) => {
      r.users.remove(msg.author);
      page = page > 0 ? --page : pages.length - 1;
      currentpage.edit(pages[page]);
    });
    forwardcollector.on("end", () => {
      if (!currentpage.deleted) {
        currentpage.reactions.removeAll();
      } else {
        return;
      }
    });
    backwardcollector.on("end", () => {
      if (!currentpage.deleted) {
        currentpage.reactions.removeAll();
      } else {
        return;
      }
    });
    return this;
  }
}
module.exports = Pagination;
