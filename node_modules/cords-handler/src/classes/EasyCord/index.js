const moment = require("moment");
require("moment-duration-format");
class EasyCord {
  constructor(client) {
    if (!client) throw new ReferenceError("Client Must Be Supplied.");
    else {
      this.client = client;
    }
  }
  async setSlowMode(time, channel) {
    if (!time) throw new ReferenceError("Time Must Be Supplied.");
    if (!channel) throw new ReferenceError("Channel Must Be Supplied.");
    else {
      await channel.setRateLimitPerUser(time);
    }
  }
  async autoPublish() {
    this.client.on("message", async (msg) => {
      const { channel } = msg;
      if (channel.type === "news") {
        msg.crosspost();
      }
    });
  }
  async messageAwaiter(message, time, author) {
    if (!message) throw new ReferenceError("Message Must Be Supplied.");
    if (!time) throw new ReferenceError("Time Must Be Supplied.");
    if (!author) throw new ReferenceError("Author Must Be Supplied.");
    const filter = (x) => {
      return x.author.id === author.id;
    };

    let awaiter = await message.channel.awaitMessages(filter, {
      max: 1,
      time: time,
    });

    return awaiter;
  }
  async editAfter(message, messagetoedit, time) {
    if (!message) throw new ReferenceError("Message Must Be Supplied.");
    if (!messagetoedit)
      throw new ReferenceError("Message To Edit Must Be Supplied.");
    if (!time) throw new ReferenceError("Time Must Be Supplied.");
    setTimeout(async () => {
      await message.edit(messagetoedit);
    }, time);
  }
  async userFlags(user) {
    if (!user) throw new ReferenceError("User Must Be Supplied.");
    let flags = {
      DISCORD_EMPLOYEE: "Discord Employee",
      DISCORD_PARTNER: "Discord Partner",
      BUGHUNTER_LEVEL1: "Bug Hunter Level 1",
      BUGHUNTER_LEVEL2: "Bug Hunter Level 2",
      HYPESQUAD_EVENTS: "HypeSquad Events",
      HOUSE_BRILLIANCE: "House Of Brilliance",
      HOUSE_BALANCE: "House Of Balance",
      HOUSE_BRAVERY: "House Of Bravery",
      VERIFIED_BOT: "Verified Bot",
      SYSTEM: "System",
      VERIFIED_DEVELOPER: "Verified Bot Developer",
      TEAM_USER: "Team User",
    };
    const flagsarr = user.flags.toArray();
    return flagsarr.map((flag) => flags[flag]);
  }
  async createdAt(user) {
    if (!user) throw new ReferenceError("User Must Be Supplied.");
    let now = await Date.now();
    let date = (await now) - user.createdTimestamp;
    let toreturn = await moment
      .duration(date)
      .format("Y [Years], D [Days], H [Hours], m [Minutes],s [seconds]");
    let toreturn2 = await `${toreturn} Ago`;
    return toreturn2;
  }
  async deleteAfter(message, time) {
    if (!message) throw new ReferenceError("Message Must Be Supplied.");
    if (!time) throw new ReferenceError("Time Must Be Supplied.");
    setTimeout(async () => {
      await message.delete();
    }, time);
  }
}
module.exports = EasyCord;
